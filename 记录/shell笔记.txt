1.shell是一个命令行解释器，用于接受应用程序、用户命令，然后调用操作系统内核。


2．脚本格式
脚本以#!/bin/bash开头（指定解析器）

sh执行：sh helloworld.sh

修改权限：chmod 777 xxx.sh
直接执行 : xxx.sh

3. 常用系统变量
$HOME、$PWD、$SHELL、$USER等

4．基本语法
（1）定义变量：变量=值 
（2）撤销变量：unset 变量
（3）声明静态变量：readonly变量，注意：不能unset

5．变量定义规则
（1）变量名称可以由字母、数字和下划线组成，但是不能以数字开头，环境变量名建议大写。
（2）等号两侧不能有空格
（3）在bash中，变量默认类型都是字符串类型，无法直接进行数值运算。
（4）变量的值如果有空格，需要使用双引号或单引号括起来。

6.可把变量提升为全局环境变量，可供其他Shell程序使用
export 变量名

7.特殊变量
$n（功能描述：n为数字，$0代表该脚本名称，$1-$9代表第一到第九个参数，十以上的参数，十以上的参数需要用大括号包含，如${10}）
$# (功能描述：获取所有输入参数个数，常用于循环）
$* (功能描述：这个变量代表命令行中所有的参数，$*把所有的参数看成一个整体）
$@ (功能描述：这个变量也代表命令行中所有的参数，不过$@把每个参数区分对待）
$？(功能描述：最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值为非0（具体是哪个数，由命令自己来决定），则证明上一个命令执行不正确了。）


8.运算符
基本语法
（1）“$((运算式))”或“$[运算式]”
（2）expr  + , - , \*,  /,  %    加，减，乘，除，取余
注意：expr运算符间要有空格
e.g:
expr `expr 2 + 3` \* 4 =（2+3）*4

s=$[(2+3)*4] 
echo $s

9.条件判断
基本语法
[ condition ]（注意condition前后要有空格）
注意：条件非空即为true，[ atguigu ]返回true，[] 返回false。

常用判断条件
（1）两个整数之间比较
= 字符串比较
-lt 小于（less than）			-le 小于等于（less equal）
-eq 等于（equal）				-gt 大于（greater than）
-ge 大于等于（greater equal）	-ne 不等于（Not equal）
（2）按照文件权限进行判断
-r 有读的权限（read）			-w 有写的权限（write）
-x 有执行的权限（execute）
（3）按照文件类型进行判断
-f 文件存在并且是一个常规的文件（file）
-e 文件存在（existence）		-d 文件存在并是一个目录（directory）
（4）多条件判断（&& 表示前一条命令执行成功时，才执行后一条命令，|| 表示上一条命令执行失败后，才执行下一条命令）

10.流程控制@重点

基本语法
if [ 条件判断式 ];then 
  程序 
fi 

或者 
if [ 条件判断式 ] 
  then 
    程序 
fi

注意事项：
（1）[ 条件判断式 ]，中括号和条件判断式之间必须有空格
（2）if后要有空格

case 语句
1．基本语法
case $变量名 in 
"值1"） 
    如果变量的值等于值1，则执行程序1 
    ;; 
  "值2"） 
    如果变量的值等于值2，则执行程序2 
    ;; 
  …省略其他分支… 
  *） 
    如果变量的值都不是以上的值，则执行此程序 
    ;; 
esac

注意事项：
1)	case行尾必须为单词“in”，每一个模式匹配必须以右括号“）”结束。
2)	双分号“;;”表示命令序列结束，相当于java中的break。
3)	最后的“*）”表示默认模式，相当于java中的default。

for 循环
1．基本语法1
	for (( 初始值;循环控制条件;变量变化 )) 
  do 
    程序 
  done

2. 基本语法2
for 变量 in 值1 值2 值3… 
  do 
    程序 
  done
$*和$@都表示传递给函数或脚本的所有参数，不被双引号“”包含时，都以$1 $2 …$n的形式输出所有参数。
当它们被双引号“”包含时，“$*”会将所有的参数作为一个整体，以“$1 $2 …$n”的形式输出所有参数；“$@”会将各个参数分开，以“$1” “$2”…”$n”的形式输出所有参数。


